@using OrchardCore.Navigation
@{
    int level = (int)Model.Level;
    TagBuilder tag = Tag(Model, "li");
    tag.AddCssClass("nav-item");
    TagBuilder parentTag = null;
    if ((bool)Model.HasItems)
    {
        tag.AddCssClass("dropdown");
        parentTag = Tag(Model, "ul");
        parentTag.AddCssClass("dropdown-menu");
    }

    // Morphing the shape to keep Model untouched
    Model.Metadata.Type = "NavigationItemLink";
    Model.Metadata.Alternates.Clear();
    Model.Classes.Clear();
    bool selfHandled = false;
    @if ((int)Model.Level > 1)
    {
        Model.Classes.Add("dropdown-item");
    }
    else
    {
        Model.Classes.Add("nav-link");
        if (Model.HasItems)
        {
            Model.Classes.Add("dropdown-toggle");
            Model.Attributes.Add("data-bs-toggle", "dropdown");
        }
        else
        {
            selfHandled = true;
            var link = new TagBuilder("a");
            link.Attributes.Add("href", Model.Href ?? "#");
            link.AddCssClass("nav-link");

            var menuItem = Model.Item as MenuItem;

            if (menuItem != null && menuItem.HasRouteValuesAs(ViewContext.HttpContext.Request.RouteValues))
            {
                link.AddCssClass("active");
            }

            link.InnerHtml.AppendHtml(Model.Text);

            tag.InnerHtml.AppendHtml(link);
        }
    }

    @if (!selfHandled)
    {
        tag.InnerHtml.AppendHtml(await DisplayAsync(Model));
    }

    if (parentTag != null)
    {
        foreach (var item in Model.Items)
        {
            item.Level = level + 1;
            item.ParentTag = parentTag;
            parentTag.InnerHtml.AppendHtml(await DisplayAsync(item));
        }

        tag.InnerHtml.AppendHtml(parentTag);
    }
}

@tag
